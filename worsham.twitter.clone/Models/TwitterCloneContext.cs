// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace worsham.twitter.clone.Models
{
    public partial class TwitterCloneContext : DbContext
    {
        public TwitterCloneContext()
        {
        }

        public TwitterCloneContext(DbContextOptions<TwitterCloneContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Comments> Comments { get; set; }
        public virtual DbSet<Follows> Follows { get; set; }
        public virtual DbSet<Likes> Likes { get; set; }
        public virtual DbSet<ReTweets> ReTweets { get; set; }
        public virtual DbSet<Tweets> Tweets { get; set; }
        public virtual DbSet<Users> Users { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Comments>(entity =>
            {
                entity.HasOne(d => d.Commenter)
                    .WithMany(p => p.Comments)
                    .HasForeignKey(d => d.CommenterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Comments_Users");

                entity.HasOne(d => d.OriginalTweet)
                    .WithMany(p => p.Comments)
                    .HasForeignKey(d => d.OriginalTweetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Comments_Tweets");
            });

            modelBuilder.Entity<Follows>(entity =>
            {
                entity.HasOne(d => d.FollowedUser)
                    .WithMany(p => p.FollowsFollowedUser)
                    .HasForeignKey(d => d.FollowedUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Follows_Users");

                entity.HasOne(d => d.FollowerUser)
                    .WithMany(p => p.FollowsFollowerUser)
                    .HasForeignKey(d => d.FollowerUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FollowerUserId");
            });

            modelBuilder.Entity<Likes>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.Likes)
                    .HasForeignKey<Likes>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Likes_Users");

                entity.HasOne(d => d.LikedTweet)
                    .WithMany(p => p.Likes)
                    .HasForeignKey(d => d.LikedTweetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Likes_Tweets");
            });

            modelBuilder.Entity<ReTweets>(entity =>
            {
                entity.HasOne(d => d.OriginalTweet)
                    .WithMany(p => p.ReTweets)
                    .HasForeignKey(d => d.OriginalTweetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReTweets_Tweets");

                entity.HasOne(d => d.Retweeter)
                    .WithMany(p => p.ReTweets)
                    .HasForeignKey(d => d.RetweeterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReTweets_Users");
            });

            modelBuilder.Entity<Tweets>(entity =>
            {
                entity.HasOne(d => d.Tweeter)
                    .WithMany(p => p.Tweets)
                    .HasForeignKey(d => d.TweeterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Tweets_Users");
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.Property(e => e.ProfilePictureUrl).HasMaxLength(300).IsUnicode(false);
                entity.Property(e => e.UserName).IsRequired().HasMaxLength(20).IsUnicode(false);
                entity.HasIndex(e => e.UserName).IsUnique();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}