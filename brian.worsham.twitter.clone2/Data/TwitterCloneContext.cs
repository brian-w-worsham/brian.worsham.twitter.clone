// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using brian.worsham.twitter.clone2.Models;

namespace brian.worsham.twitter.clone2.Data
{
    public partial class TwitterCloneContext : DbContext
    {
        public TwitterCloneContext()
        {
        }

        public TwitterCloneContext(DbContextOptions<TwitterCloneContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AspNetRoleClaims> AspNetRoleClaims { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserTokens> AspNetUserTokens { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<Comments> Comments { get; set; }
        public virtual DbSet<Follows> Follows { get; set; }
        public virtual DbSet<Likes> Likes { get; set; }
        public virtual DbSet<ReTweets> ReTweets { get; set; }
        public virtual DbSet<Tweets> Tweets { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AspNetRoles>(entity =>
            {
                entity.HasIndex(e => e.NormalizedName, "RoleNameIndex")
                    .IsUnique()
                    .HasFilter("([NormalizedName] IS NOT NULL)");
            });

            modelBuilder.Entity<AspNetUserLogins>(entity =>
            {
                entity.HasKey(e => new { e.LoginProvider, e.ProviderKey });
            });

            modelBuilder.Entity<AspNetUserTokens>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name });
            });

            modelBuilder.Entity<AspNetUsers>(entity =>
            {
                entity.HasIndex(e => e.NormalizedUserName, "UserNameIndex")
                    .IsUnique()
                    .HasFilter("([NormalizedUserName] IS NOT NULL)");

                entity.HasMany(d => d.Role)
                    .WithMany(p => p.User)
                    .UsingEntity<Dictionary<string, object>>(
                        "AspNetUserRoles",
                        l => l.HasOne<AspNetRoles>().WithMany().HasForeignKey("RoleId"),
                        r => r.HasOne<AspNetUsers>().WithMany().HasForeignKey("UserId"),
                        j =>
                        {
                            j.HasKey("UserId", "RoleId");

                            j.ToTable("AspNetUserRoles");

                            j.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");
                        });
            });

            modelBuilder.Entity<Comments>(entity =>
            {
                entity.HasOne(d => d.OriginalTweet)
                    .WithMany(p => p.Comments)
                    .HasForeignKey(d => d.OriginalTweetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Comments_Tweets");
            });

            modelBuilder.Entity<Follows>(entity =>
            {
                entity.HasOne(d => d.FollowedUser)
                    .WithMany(p => p.FollowsFollowedUser)
                    .HasForeignKey(d => d.FollowedUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Follows_AspNetUsers");

                entity.HasOne(d => d.FollowerUser)
                    .WithMany(p => p.FollowsFollowerUser)
                    .HasForeignKey(d => d.FollowerUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Follows_AspNetUsers1");
            });

            modelBuilder.Entity<Likes>(entity =>
            {
                entity.HasOne(d => d.LikedTweet)
                    .WithMany(p => p.Likes)
                    .HasForeignKey(d => d.LikedTweetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Likes_Tweets");

                entity.HasOne(d => d.UserThatLikedTweet)
                    .WithMany(p => p.Likes)
                    .HasForeignKey(d => d.UserThatLikedTweetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Likes_AspNetUsers");
            });

            modelBuilder.Entity<ReTweets>(entity =>
            {
                entity.HasOne(d => d.OriginalTweet)
                    .WithMany(p => p.ReTweets)
                    .HasForeignKey(d => d.OriginalTweetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReTweets_Tweets");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}